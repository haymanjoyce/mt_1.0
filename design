These are design notes for CLI application that takes user-supplied project and formatting data and generates an SVG that visualises this data as a Gantt chart which is intended for display on one piece of paper (i.e. a Plan on a Page) or slide.

PROJECT FILES
we handle the data as panda dfs
we import and export as csv, xls, json, hdf5, pkl file formats (pandas makes this easy)
dfs are checked and cleaned on import (e.g. using try and except statements)
we can import or export named or all tables
we have option to export without formatting data
format data is specific to rows (where custom overrides default)
allows user to make small tweaks to fix things like overlapping text, or to highlight a task

CONFIG
json config file for tool settings (holding file locations, for example)

TEMPLATES
template project file which contains all project and formatting fields required by the tool

STYLE FILES
json style files
so you might have active project, baseline, and other types of style that you want to apply to project data

COMPILE
we will need to turn project data into geometry units
and convert formatting data into something drawsvg2 can read
we can add this to the same df
note, Pandas supports converting date ranges into increments
we may need a command for this (e.g. compile)
note, in drawsvg2 scaling increases borders which we may not want as we will get border bleed

DRAW
and then build svg
we may use more than one project file
we may create drawing with multiple projects showing, for example, one as active and several as baseline
we may create animation out of several active projects
svgdraw2 handles svg elements as objects which then output svg
the objects will be deleted at end of session
so we will need commands to say what data to use and what drawing to create

SAVE
we can save the svg as an svg file
or convert it into html, mpeg, png, pdf, etc.
drawsvg2 supports this and my need Cairo and/or Ghostscript as dependencies

VIEW
we may have command to open file in specific app (e.g. browser or Jupyter Notebook)
we may create our own viewer using QtSVG

====

For the development of the CLI application you described, here are some Python modules that you could consider using:

pandas: For handling and manipulating data as dataframes.
json: For working with JSON files, including configuration and style files.
drawsvg2: A library for creating SVG drawings and handling SVG elements.
matplotlib: A versatile plotting library that can be used for generating Gantt charts.
click: A command-line interface (CLI) framework that simplifies building command-line applications.
pathlib: For handling file paths and operations in a cross-platform manner.
argparse: Another module for building command-line interfaces and parsing command-line arguments.
pydantic: For data validation and modeling, especially useful for handling configuration files and input data.
cairosvg: A library that allows converting SVG files to other formats like PNG, PDF, etc.
PySide/PyQt: Libraries for creating graphical user interfaces (GUI) and custom viewers using Qt, which could be useful for the "VIEW" component.
Additionally, you might need the following modules as dependencies for some of the libraries mentioned above:

numpy: A library for numerical computations that pandas relies on.
matplotlib-dates: An extension to matplotlib for handling dates and time in plotting.
ghostscript: A library for working with PostScript and PDF files, which could be a dependency for generating PDF files from SVG.
Remember to review the documentation and requirements of each library to determine if they meet your specific needs and compatibility requirements for your development environment.

====

Based on the application design you provided, here's a suggested file structure and a list of custom modules you could create:

```
app/
├── config/
│   ├── config.json
│   └── style.json
├── data/
│   ├── input/
│   │   ├── project_data.csv
│   │   └── formatting_data.csv
│   └── output/
│       └── result.svg
├── templates/
│   └── template_project.csv
├── src/
│   ├── __init__.py
│   ├── compiler.py
│   ├── draw.py
│   ├── exporter.py
│   ├── importer.py
│   ├── main.py
│   ├── saver.py
│   ├── viewer.py
│   └── utils.py
└── requirements.txt
```

1. `config/`: Directory for storing configuration files.
   - `config.json`: JSON file containing tool settings, such as file locations.
   - `style.json`: JSON file containing different style configurations.

2. `data/`: Directory for storing input and output data files.
   - `input/`: Directory for storing input data files.
   - `output/`: Directory for storing generated output files.

3. `templates/`: Directory for storing template files.
   - `template_project.csv`: CSV file containing the required fields for the tool's template project.

4. `src/`: Directory for storing custom Python modules.
   - `__init__.py`: Empty file to mark the directory as a Python package.
   - `compiler.py`: Module for compiling project data into geometry units and formatting data for drawsvg2.
   - `draw.py`: Module for building SVG drawings using project data and styles.
   - `exporter.py`: Module for handling import and export operations for various file formats using pandas.
   - `importer.py`: Module for importing and cleaning data from different file formats using pandas.
   - `main.py`: Main module to orchestrate the application flow and command-line interface using libraries like click.
   - `saver.py`: Module for saving the generated SVG as different file formats using drawsvg2 and other dependencies.
   - `viewer.py`: Module for creating a custom viewer using QtSVG or integrating with existing applications.
   - `utils.py`: Module for utility functions and helper methods.

5. `requirements.txt`: File specifying the Python dependencies required for the project.

In this file structure, the `src` directory contains custom modules that handle different components of the application. Each module focuses on a specific functionality, such as importing/exporting, compilation, drawing, saving, viewing, and utility functions.

You can add more modules or subdirectories as needed based on the complexity and organization of your application. Remember to adapt the file structure and module names to fit your specific needs and development preferences.

=====

In the `utils.py` module, you can define various utility functions that can be used across different parts of your application. Here are some examples of the types of functions you might include:

1. Data Cleaning and Validation:
   - Functions for cleaning and validating data, such as removing duplicates, handling missing values, or checking data integrity.
   - Functions to validate the structure and content of the imported data.
   - Utilities for converting data types, handling date formats, or applying custom data transformations.

2. File Handling and Path Operations:
   - Functions to handle file operations, such as checking file existence, creating directories, or deleting files.
   - Utilities for manipulating file paths, joining paths, or resolving file extensions.

3. Formatting and Styling:
   - Functions for applying formatting rules to the project data, such as adjusting row heights, handling overlapping text, or highlighting specific tasks.
   - Utilities for parsing and applying style configurations from the style files.
   - Functions for converting formatting data into a format compatible with the drawing component.

4. Date and Time Manipulation:
   - Functions for working with date ranges, calculating date increments, or formatting dates according to specific requirements.
   - Utilities for converting date formats, handling time zones, or performing date-related calculations.

5. General Utilities:
   - Helper functions that perform common operations, such as data filtering, sorting, or merging.
   - Functions for logging, error handling, or displaying progress indicators.
   - Utilities for generating unique identifiers or random values.

Remember that the specific functions and classes in the `utils.py` module will depend on the specific requirements of your application and the common operations that need to be shared among other modules. It's a good practice to keep the utility functions focused, modular, and reusable to enhance the maintainability and readability of your codebase.

